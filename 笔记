Spring IOC( 控制反转 )

Spring 大管家负责创建和管理对象
1.对象池方式管理bean;
2.同(DI 依赖注入)配置bean

使用步骤:
1. 配置 pom.xml ==> spring-context 依赖 (bean core aop ...)
2. 配置 spring 的配置文件 : xml 和 注解
3. 业务开发

注入方式:
1. setter 注入 (常用)
2. 构造方法注入
3. 接口注入  (SpringMVC 大量使用)

bean 高级的特性和生命周期配置


Spring IOC 
XML配置				注解配置
beans.xml			BeanConfig.java + @Configuration
<bean>				@Bean
<init-lazy="true">	@Lazy
<primary="true">	@Primary
<init-method="">	@Bean(initMethod="")
<property>			Java 代码  ==> setXXXX

autowire			


注解实现自动装配( 配置业务模块之间的依赖注入 )
	xxxBiz ==> xxxDao
	class xxxBiz {
		private xxxDao xDao; // 实现自动的注入
	}

组件注解: 直接在业务类上定义的注解, 作用是替代 @Bean
@Component		通用的组件注解
@Controller		控制器组件注解 ==> 相对于 Servlet
@Service		服务类组件注解 ==> xxxBiz, xxxService ...
@Repository		Dao类组件注解 ==> xxxDao, xxxMapper ...

在配置类上加上组件扫描注解

实现 bean 自动注入
@Autowired	
@Resource

	<div>  层
	html5  <header><footer> .... 结构语义性


AOP: 实现通用的业务模块: 日志, 性能监控, 安全, 事务管理

OOP: 业务方法越来越细粒度 ==> 方法越来越多  ==> AOP 面向切面编程

AOP 的重要概念

join point(连接点):所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法,因为spring只支持方法类型的连接点.
		方法
		
Pointcut(切入点, 切点):所谓切入点是指我们要对那些joinpoint进行拦截的定义.通知定义了切面的”什么”和”何时”，切入点就定义了”何地”.
		连接点的表达式

Advice(通知):所谓通知是指拦截到joinpoint之后所要做的事情就是通知.通知分为前置通知,后置通知,异常通知,最终通知,环绕通知(切面要完成的功能)
		增强

Aspect(切面): 是通知和切入点的结合,通知和切入点共同定义了关于切面的全部内容---它的功能、在何时和何地完成其功能
		切面 = 切点 + 通知(增强)  => java 类型  xml标签

Target(目标对象):代理的目标对象
		被通知(增强)的对象  xxxBiz, xxxDao
		
Weaving(织入):是指把切面应用到目标对象来创建新的代理对象的过程.切面在指定的连接点织入到目标对象

Introduction(引入):在不修改类代码的前提下, Introduction可以在运行期为类动态地添加一些方法或Field.

try {
	before();
	biz();
	afterReturing();  
} catch (Exception e) {
	afterThrowing();
} finally {
	after();
}

======1=======
========== 前置增强 ===========
oracle user dao
========== 后置增强 ===========
========== 返回增强 ===========
======2=======
========== 前置增强 ===========
mysql user dao
========== 后置增强 ===========
========== 异常增强 ===========


Spring AOP 面向切面编程

连接点(JoinPoint) : 方法 (Spring只支持方法级连接点)
切点(Pointcut)	: 表达式, 描述要拦截的连接点 ==> AspectJ
					引入 : spring-aspects
通知(Advice)		: 增强: 前置, 后置, 返回, 异常(与返回互斥) , 环绕增强
切面(Aspect)		: 切点 + 通知
被代理对象			: 被通知(增强)的业务对象
织入				: 将通知与业务类合并的过程
引入				: 动态添加属性和方法

Spring AOP注解配置
1. 配置类上加入 @EnableAspectJAutoProxy 启动AspectJ代理
2. 定义切面类
	1) 类上加 @Aspect, @Component
	2) 定义切点 @Pointcut 在一个方法只上 , 使用AspectJ的切点表达式
		execution (  方法匹配表达式  )
		whitin
		args
	3) 定义通知
		@Before			前置
		@After			后置
		@AfterReturning 返回
		@AfterThrowing  异常
			JoinPoint   连接点对象, 可以通过方法参数注入(接口注入)
		@Around			环绕(功能最强大) 性能监控, 数据库事务管理
			ProceedingJoinPoint( JoinPoint 子类 )
			porceed() 用于执行目标业务方法的方法


代理模式 
代理模式:代理模式的英文叫做Proxy或Surrogate，中文都可译为”代理“，所谓代理，就是一个人或者一个机构代表另一个人或者另一个机构采取行动。在一些情况下，一个客户不想或者不能够直接引用一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用
抽象主题角色：声明了真实主题和代理主题的共同接口，这样一来在任何可以使用真实主题的地方都可以是使用代理主题
代理主题（Proxy）角色：代理主题角色内部含有对真实主题的引用，从而可以在任何时候操作真实主题对象；代理主题角色提供一个与真实主题角色相同的接口，以便可以在任何时候都可以替代真实主题控制对真实主题的引用，负责在需要的时候创建真实主题对象（和删除真实主题对象）；代理角色通常在将客户端调用传递给真实的主题之前或之后，都要执行某个操作，而不是单纯地将调用传递给真实主题对象。
真实主题角色：定义了代理角色所代表地真实对象


静态代理
	问题: 为每一个被代理对象创建一个代理对象
	
动态代理( AOP )
	JDK动态代理	:Java官方实现动态代理的方式, 基于接口实现	
		使用有java虚拟机动态的"制造"出来一个对象, 与被代理对相应一模一样( 实现相同的接口 )
		
	CGLIB动态代理	:第三方实现, 基于动态代码生成 + 继承
		不能代理 final 类 或 final 方法

Spring AOP 的动态代理机制
	1. 如果不配置 AOP, Spring 不会启动动态代理 , 底层就是直接通过 new 创建对象
	2. 如果配置AOP:
		1) 如果被代理对象有实现接口, 那么使用JDK动态代理
		2) 如果被代理对象没有实现接口, 那么使用CGLIB动态代理


Spring的配置类(或xml) , 在扫描到其他配置类, 那么会将该配置类的配置信息合并到当前配置文件文件中

Bean 注解, 在没有配name (等同于id) 那么方法名就是 name


=======================================
Spring AOP 实现机制 (代理模式)
静态代理
动态代理
	1. JDK 动态代理
	2. CGLIB 实现
	
	
Spring 事务管理

1. Spring JDBC 编程
	DBHelper (放弃)
	MyBatis	 
	SpringJDBC 最轻量级的jdbc封装(连接池, 事务管理, 模板操作(简化jdbc)) 
	
2. Spring 事务配置

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
        ">
  		 <!-- context 命名空间的标签 需要单独引入 -->
        <!-- 引入属性文件 -->
		<context:property-placeholder location="jdbc.properties"/>
        
   		<!-- 组件扫描 -->
		<context:component-scan base-package="com.yc.spring.bank"></context:component-scan>
       
        <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
			    <property name="driverClassName" value="${jdbc.driverClassName}" />
			    <property name="url" value="${jdbc.url}" />
			    <property name="username" value="${jdbc.username}" />
			    <property name="password" value="${jdbc.password}" />
		</bean>	    
		
		<bean id="jdbcTemplate"  class="org.springframework.jdbc.core.JdbcTemplate">
		    <property name="dataSource" ref="dataSource"></property>
		</bean>
        
        <!-- similarly, don't forget the TransactionManager 配置事务管理器bean-->
	    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	        <property name="dataSource" ref="dataSource"/>
	    </bean>

		<!-- a TransactionManager is still required  启动事务注解驱动-->
		<tx:annotation-driven transaction-manager="txManager"/>

		<!-- Spring 定义的事务增强 
			<tx:advice id="txAdvice" transaction-manager="txManager">
					事务的属性配置. 	
				<tx:attributes>
					所有get开头的方法，是只读事务
					<tx:method name="get*" read-only="true" />
					
							其他方法使用默认的事务设置 
							propagation =REQUIRED,   默认的传播属性
							isolation = Isolation.DEFAULT,  默认的隔离级别
							timeout = -1  超时设置 ，-1不限时
										1.语句复杂，执行过程太长
										2.操作的数据被其他事务锁定
							rollback-for=""   出现哪些异常回滚		
							no-rollback-for=""   出现哪些异常不回滚			
							Spring 事务回滚规则
							默认情况下，Spring只会对捕获的运行期异常，执行回滚
							如果出现编译期异常你需要回滚，如何操作？
							答：
							 		1.将该编译期异常转型为运行期异常
							 		2.使用rollback-for定义要回滚的异常
					
					<tx:method name="*" 
							propagation="REQUIRED" 
							isolation="DEFAULT"	
							timeout = "-1"	
							rollback-for="com.yc.spring.bank.biz.BizException"
					/>
				</tx:attributes>
			</tx:advice>
		
		AOP 切片配置
		<aop:config>
			<aop:pointcut id="fooServiceOperation" expression="execution( * com.yc.spring.bank.biz.*.*(..))" />
			<aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceOperation" />
		</aop:config>

           -->      
       
</beans>   